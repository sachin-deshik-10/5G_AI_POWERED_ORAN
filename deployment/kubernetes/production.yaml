# Kubernetes Deployment Configuration for 5G OpenRAN AI Optimizer
# Production-ready deployment with auto-scaling, monitoring, and high availability

apiVersion: v1
kind: Namespace
metadata:
  name: 5g-optimizer
  labels:
    name: 5g-optimizer
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: optimizer-config
  namespace: 5g-optimizer
data:
  DATABASE_URL: "postgresql://postgres:password@postgres-service:5432/5g_optimizer"
  REDIS_URL: "redis://redis-service:6379"
  LOG_LEVEL: "INFO"
  MODEL_PATH: "/app/models/transformer_model.pth"
  API_VERSION: "2.0.0"
  PROMETHEUS_PORT: "8001"
  WEBSOCKET_MAX_CONNECTIONS: "1000"
  OPTIMIZATION_BATCH_SIZE: "32"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: optimizer-secrets
  namespace: 5g-optimizer
type: Opaque
data:
  database-password: cGFzc3dvcmQ=  # base64 encoded 'password'
  redis-password: ""
  jwt-secret: eW91ci1qd3Qtc2VjcmV0LWtleQ==

---
# PersistentVolumeClaim for model storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-storage
  namespace: 5g-optimizer
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# Deployment for the main API server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: optimizer-api
  namespace: 5g-optimizer
  labels:
    app: optimizer-api
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: optimizer-api
  template:
    metadata:
      labels:
        app: optimizer-api
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api-server
        image: 5g-optimizer/api-server:2.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: metrics
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: optimizer-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: optimizer-config
              key: REDIS_URL
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: optimizer-secrets
              key: database-password
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-storage

---
# Service for API server
apiVersion: v1
kind: Service
metadata:
  name: optimizer-api-service
  namespace: 5g-optimizer
  labels:
    app: optimizer-api
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 8001
    targetPort: 8001
    protocol: TCP
  selector:
    app: optimizer-api

---
# HorizontalPodAutoscaler for auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: optimizer-api-hpa
  namespace: 5g-optimizer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: optimizer-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: optimization_requests_per_second
      target:
        type: AverageValue
        averageValue: "10"

---
# PostgreSQL Database Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: 5g-optimizer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "5g_optimizer"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: optimizer-secrets
              key: database-password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: 5g-optimizer
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: 5g-optimizer
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: 5g-optimizer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: 5g-optimizer
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: optimizer-ingress
  namespace: 5g-optimizer
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - 5g-optimizer.example.com
    secretName: optimizer-tls
  rules:
  - host: 5g-optimizer.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: optimizer-api-service
            port:
              number: 8000
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: optimizer-api-service
            port:
              number: 8000

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: optimizer-network-policy
  namespace: 5g-optimizer
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: monitoring
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: optimizer-metrics
  namespace: 5g-optimizer
  labels:
    app: optimizer-api
spec:
  selector:
    matchLabels:
      app: optimizer-api
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: optimizer-alerts
  namespace: 5g-optimizer
spec:
  groups:
  - name: 5g-optimizer.rules
    rules:
    - alert: HighErrorRate
      expr: rate(api_requests_total{code=~"5.."}[5m]) > 0.1
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High error rate detected"
        description: "Error rate is {{ $value }} errors per second"
    
    - alert: HighLatency
      expr: histogram_quantile(0.95, rate(api_request_duration_seconds_bucket[5m])) > 2
      for: 10m
      labels:
        severity: critical
      annotations:
        summary: "High API latency"
        description: "95th percentile latency is {{ $value }}s"
    
    - alert: OptimizationFailures
      expr: rate(optimization_requests_total{status="failed"}[5m]) > 0.05
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High optimization failure rate"
        description: "Optimization failure rate is {{ $value }} per second"
