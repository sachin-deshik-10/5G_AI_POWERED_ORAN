name: AI-Powered 5G OpenRAN Optimizer CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ===== Code Quality & Security =====
  code-quality:
    name: Code Quality & Security Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort bandit safety mypy pytest-cov

    - name: Code formatting with Black
      run: black --check --diff .

    - name: Import sorting with isort
      run: isort --check-only --diff .

    - name: Linting with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Security check with bandit
      run: bandit -r src/ -f json -o bandit-report.json

    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json

    - name: Type checking with mypy
      run: mypy src/ --ignore-missing-imports

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ===== Unit Tests =====
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist

    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=test-results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ===== Integration Tests =====
  integration-tests:
    name: Integration & E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_oran
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for services
      run: |
        sleep 10
        redis-cli -h localhost ping
        pg_isready -h localhost -p 5432

    - name: Run integration tests
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_oran
        ENVIRONMENT: test
      run: |
        python -m pytest tests/integration/ -v --tb=short

    - name: Run end-to-end pipeline test
      run: |
        python demo.py --test-mode
        python src/main.py "computing_datasets/datasets_unpin/realistic_computing.csv"

  # ===== Performance & Load Tests =====
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust memory-profiler

    - name: Run performance benchmarks
      run: |
        python -c "
        import time
        import sys
        sys.path.append('src')
        from main import main
        
        # Benchmark main pipeline
        start_time = time.time()
        main('computing_datasets/datasets_unpin/realistic_computing.csv')
        end_time = time.time()
        
        execution_time = end_time - start_time
        print(f'Pipeline execution time: {execution_time:.2f} seconds')
        
        # Performance threshold (should complete within 60 seconds)
        if execution_time > 60:
            print('❌ Performance test failed: Pipeline too slow')
            sys.exit(1)
        else:
            print('✅ Performance test passed')
        "

    - name: Memory usage profiling
      run: |
        python -m memory_profiler src/main.py "computing_datasets/datasets_unpin/realistic_computing.csv"

  # ===== Docker Build & Security Scan =====
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            g++ \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY . .

        # Create non-root user
        RUN useradd -m -u 1000 oran && chown -R oran:oran /app
        USER oran

        # Health check
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
          CMD python -c "import requests; requests.get('http://localhost:8000/health')" || exit 1

        EXPOSE 8000

        CMD ["python", "-m", "uvicorn", "api.api_server:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF

    - name: Build Docker image
      run: |
        docker build -t 5g-oran-optimizer:${{ github.sha }} .
        docker tag 5g-oran-optimizer:${{ github.sha }} 5g-oran-optimizer:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '5g-oran-optimizer:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 8000:8000 5g-oran-optimizer:latest
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container
        docker rm test-container

  # ===== Build & Push Container =====
  build-and-push:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: [docker-build, performance-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/5g-oran-optimizer
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== Deploy to Staging =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to Kubernetes staging
      run: |
        echo "Deploying to staging environment..."
        # Replace with actual kubectl commands
        # kubectl apply -f deployment/kubernetes/staging.yaml
        echo "✅ Staging deployment completed"

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add actual smoke tests here
        sleep 10
        echo "✅ Smoke tests passed"

  # ===== Deploy to Production =====
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to Kubernetes production
      run: |
        echo "Deploying to production environment..."
        # Replace with actual kubectl commands
        # kubectl apply -f deployment/kubernetes/production.yaml
        echo "✅ Production deployment completed"

    - name: Post-deployment verification
      run: |
        echo "Running post-deployment verification..."
        # Add actual verification tests here
        sleep 15
        echo "✅ Production verification completed"

  # ===== Monitoring & Alerting =====
  monitoring:
    name: Setup Monitoring & Alerts
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure monitoring dashboards
      run: |
        echo "Setting up Grafana dashboards..."
        echo "Configuring Prometheus alerts..."
        echo "✅ Monitoring setup completed"

    - name: Send deployment notification
      run: |
        echo "📡 5G OpenRAN Optimizer deployed successfully!"
        echo "🔗 Production URL: https://5g-oran-optimizer.example.com"
        echo "📊 Monitoring: https://grafana.example.com"

  # ===== Cleanup =====
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [monitoring]
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      run: |
        echo "Cleaning up old artifacts and temporary resources..."
        echo "✅ Cleanup completed"
